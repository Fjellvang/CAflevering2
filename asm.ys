	irmovq stack,%rsp
	call start
	halt
start:
	irmovq $0,%r11		# i = 0
	irmovq $1,%r14 	# værdi til at decrementere counts.
	irmovq $8,%rbx 	# værdi til at indexere array
	irmovq 4,%rdi #len=4 til rdi
	subq %r14,%rdi 	# sæt len til len-1
	irmovq array,%rsi #array til rsi
	jmp while1

#array of 4 elements:
	.align 8
array:  .quad 0x000000000010
	.quad 0x000000000009
	.quad 0x000000000008
	.quad 0x000000000007
L4:
	mrmovq (%rsi),%r8       # smid A[j] i R8
	rrmovq %r8,%rcx		# smid r8 i en tempj
	mrmovq 8(%rsi),%rdx	# smid A[i+1] i RDX
	rrmovq %rdx,%r9		# smid A[i+1] i tempj+1
	subq %r9,%rcx          # A[j+1] - A[j]
	jle L3			# jump hvis det 0 eller negativ, for så skal vi ik swap
	rmmovq %rdx,(%rsi) 	# de er forskellige så de skal swappes
	rmmovq %r8,8(%rsi) 
L3:
	addq %rbx,%rsi 	# næste array element.
	addq %r14,%rax 	# j++;
	rrmovq %rdi,%r12 #len til temp
	subq %rax,%r12
	jne L5
	addq %r14,%r11		#i+1
	irmovq array,%rsi	#sæt array til starten af arrayet.
	jmp while1		# hop til while 1, eller får vi en uendelig lykke
L6:
	irmovq $0,%rax		# initializer j=0
L5:
	rrmovq %r10,%r12	#flyt len til temp for at sammenligne
	subq %rax,%r12		# træk j fra temp, for at sætte CC's
	jne L4
while1:
	rrmovq %rdi,%r10	# len til r10
	rrmovq %r10,%r12 	# len til temp
	subq %r11,%r12          # i - len, fordi når den er nul så er vi færdige... ik?
	jne L6			# når nul-flag og sign-flag ikke er sat, må vi jumpe.'
	irmovq $5,%rax
	ret
/* $end asm.ys */	

	.pos 0x200
stack:
